{"version":3,"sources":["services/api.js","components/AutoCompleteOptions.js","components/AutoComplete.js","App.js","reportWebVitals.js","index.js"],"names":["cancelToken","AutoCompleteOption","this","props","listItemClass","children","className","React","Component","AutoComplete","state","showOptions","activeIndex","handleSearchInputChange","bind","handleKeyDown","handleAutoCompleteOptionClicked","prevProps","prevState","snapshot","e","value","target","onSearchChange","setState","dataSource","keyCode","length","fullObj","onSelect","inputStyles","placeholder","type","width","uniqueKey","displayKey","console","log","style","onChange","onKeyDown","Array","isArray","map","item","index","onClick","instance","axios","create","baseURL","headers","Accept","timeout","name","a","cancel","CancelToken","source","get","token","response","data","App","useState","namesDataSource","setNamesDataSource","autocompleteValue","setAutoCompleteValue","padding","searchText","fetchNameAutoComplete","then","info","results","catch","fullDetailsObj","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf264b24.chunk.js","sourcesContent":["import axios from 'axios';\n\n\nlet instance = axios.create({\n    baseURL: \"http://localhost:8888/\",\n    headers: {Accept: 'application/json'},\n    timeout: 30000,\n});\n\n\nlet cancelToken;\n\nexport async function fetchNameAutoComplete(name) {\n    try {\n        if (typeof cancelToken !== typeof undefined) {\n            cancelToken.cancel(\"New Request initiated, hence cancelling it\")\n        }\n\n        cancelToken = axios.CancelToken.source();\n\n        let response = await instance.get(`https://rickandmortyapi.com/api/character/?name=${name}`, {\n            cancelToken: cancelToken.token\n        });\n\n        return response.data;\n\n\n    } catch (error) {\n        throw error;\n    }\n}\n\n","import React from 'react';\n\nclass AutoCompleteOption extends React.Component {\n    render() {\n        const { listItemClass, children} = this.props;\n        return (\n            <li\n                className={listItemClass}\n                {...this.props}\n            >\n\n                {children}\n            </li>\n        );\n\n    }\n}\n\nexport default AutoCompleteOption;\n","import * as React from 'react';\nimport AutoCompleteOption from \"./AutoCompleteOptions\";\n\nclass AutoComplete extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showOptions: true,\n            activeIndex: 0,\n        };\n        this.handleSearchInputChange = this.handleSearchInputChange.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleAutoCompleteOptionClicked = this.handleAutoCompleteOptionClicked.bind(this);\n        // this.handleInputBlur = this.handleInputBlur.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n\n    }\n\n    handleSearchInputChange(e) {\n        const {value} = e.target;\n        const {onSearchChange} = this.props;\n        if (onSearchChange && typeof onSearchChange === 'function') {\n            this.setState({\n                showOptions: true,\n                activeIndex: 0\n            });\n            onSearchChange(value);\n        }\n    };\n\n    handleKeyDown(e) {\n        const {activeIndex} = this.state;\n        const {dataSource} = this.props;\n        if (e.keyCode === 13) {\n            this.setState({\n                showOptions: false,\n                activeIndex: 0\n            }, () => {\n                if (dataSource && dataSource[activeIndex]) {\n                    this.handleAutoCompleteOptionClicked(dataSource[activeIndex])\n                }\n            });\n        } else if (e.keyCode === 38) {\n            if (activeIndex === 0) {\n                return;\n            }\n\n            this.setState({activeIndex: activeIndex - 1});\n        } else if (e.keyCode === 40) {\n            if (activeIndex === dataSource.length - 1) {\n                this.setState({\n                    activeIndex: 0\n                })\n            } else {\n                this.setState({activeIndex: activeIndex + 1});\n            }\n\n\n        }\n    }\n\n    handleAutoCompleteOptionClicked(fullObj) {\n        const {onSelect} = this.props;\n        if (onSelect && typeof onSelect === 'function') {\n            onSelect(fullObj);\n            this.setState({\n                showOptions: false\n            })\n        }\n    }\n\n    render() {\n        const {inputStyles, placeholder,type = 'text', value, width, uniqueKey, displayKey, children, dataSource} = this.props;\n        const {showOptions, activeIndex} = this.state;\n        console.log('children', children);\n        return (\n            <div style={{width}}>\n                <input\n                    type={type}\n                    style={{...inputStyles}}\n                    onChange={this.handleSearchInputChange}\n                    onKeyDown={this.handleKeyDown}\n                    value={value}\n                    placeholder={placeholder}\n\n                />\n\n                {Array.isArray(dataSource) && dataSource.length && showOptions ? (\n                    <ul className=\"autoCompleteOptionsList\">\n                        {dataSource.map((item, index) => {\n                            let listItemClass = \"listItemClass\";\n                            if (index === activeIndex) {\n                                listItemClass = \"activeListItemClass\"\n                            }\n                            return (\n                               <AutoCompleteOption className={listItemClass} key={item[uniqueKey]} onClick={(item) =>  this.handleAutoCompleteOptionClicked(item)} >\n                                   {item[displayKey]}\n                               </AutoCompleteOption>\n\n                            );\n                        })}\n                    </ul>\n                ) : (\n                    <ul className=\"autoCompleteOptionsList\">\n                        {children}\n                    </ul>\n                )}\n\n\n            </div>\n        )\n    }\n}\n\nexport default AutoComplete;\n","import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport AutoComplete from \"./components/AutoComplete\";\nimport {fetchNameAutoComplete} from \"./services/api\";\nimport AutoCompleteOption from \"./components/AutoCompleteOptions\";\n\n\nfunction App() {\n    const [namesDataSource, setNamesDataSource] = useState([]);\n    const [autocompleteValue, setAutoCompleteValue] = useState('');\n\n    function getAutoCompleteDataSource(searchText) {\n        setAutoCompleteValue(searchText);\n        fetchNameAutoComplete(searchText).then(response => {\n            const {info, results = []} = response;\n            setNamesDataSource(results);\n        }).catch(e => {\n            console.log('error', e);\n            setNamesDataSource([]);\n        })\n    }\n\n    function handleSelectOption(fullDetailsObj) {\n        const { name } = fullDetailsObj;\n        setAutoCompleteValue(name);\n    }\n\n    return (\n        <div className=\"appContainer\">\n            <AutoComplete\n                inputStyles={{\n                    padding: 10,\n                    width: '100%'\n                }}\n                placeholder='Search'\n                width='50%'\n                onSearchChange={getAutoCompleteDataSource}\n                onSelect={handleSelectOption}\n                value={autocompleteValue}\n                dataSource={namesDataSource}\n                uniqueKey='id'\n                displayKey='name'\n             />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}